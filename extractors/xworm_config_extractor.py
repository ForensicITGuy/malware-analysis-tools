#!/usr/bin/env python3

# Author: Tony Lambert (@ForensicITGuy)

from Crypto.Cipher import AES
from Crypto.Protocol import KDF
from dotnetfile import DotNetPE
from base64 import b64decode
import hashlib
import argparse
import json

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--file", help="path of the binary file", required=True)
args = parser.parse_args()

dotnet_file_path = args.file
dotnet_file = DotNetPE(dotnet_file_path)
data = dotnet_file.get_user_stream_strings()

configuration = {
    "Hosts":data[0],
    "Port":data[1],
    "Key":data[2],
    "SPL":data[3],
    "Group":data[4],
    "USBNM":data[5],
    "Mutex":data[6]
}
hosts_encrypted = data[0]
port_encrypted = data[1]
key_encrypted = data[2]
spl_encrypted = data[3]
group_encrypted = data[4]
usbnm_encrypted = data[5]

#Create decryption key using mutex value         
md5 = hashlib.md5(bytes(configuration["Mutex"],'utf-8')).digest()
aes_key = bytearray([0]*32)
aes_key[0:15] = md5[0:16]
aes_key[15:32] = md5[0:16]

cipher = AES.new(aes_key, AES.MODE_ECB)

for key in configuration.keys():
    try:
        plaintext = cipher.decrypt(base64.b64decode(configuration[key]))
        out = ""
        #Remove bad characters
        for i in plaintext:
            out += chr(i)
        out2 = "".join(x for x in out if x.isprintable())

json_output = json.dumps(configuration, indent=4)

print(json_output)
